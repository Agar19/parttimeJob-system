{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\scheduling-app\\\\client\\\\src\\\\pages\\\\employee\\\\Availability.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport api from '../../services/api';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Availability = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState('');\n  const [availability, setAvailability] = useState({});\n  const [employeeId, setEmployeeId] = useState(null);\n  const [visibleDays, setVisibleDays] = useState([0, 1, 2, 3, 4, 5, 6]);\n  const [timeSlotsList, setTimeSlots] = useState([{\n    id: 1,\n    label: '7:00 AM - 8:00 AM',\n    start: '07:00',\n    end: '08:00'\n  }, {\n    id: 2,\n    label: '8:00 AM - 9:00 AM',\n    start: '08:00',\n    end: '09:00'\n  }, {\n    id: 3,\n    label: '9:00 AM - 10:00 AM',\n    start: '09:00',\n    end: '10:00'\n  }, {\n    id: 4,\n    label: '10:00 AM - 11:00 AM',\n    start: '10:00',\n    end: '11:00'\n  }, {\n    id: 5,\n    label: '11:00 AM - 12:00 PM',\n    start: '11:00',\n    end: '12:00'\n  }, {\n    id: 6,\n    label: '12:00 PM - 1:00 PM',\n    start: '12:00',\n    end: '13:00'\n  }, {\n    id: 7,\n    label: '1:00 PM - 2:00 PM',\n    start: '13:00',\n    end: '14:00'\n  }, {\n    id: 8,\n    label: '2:00 PM - 3:00 PM',\n    start: '14:00',\n    end: '15:00'\n  }, {\n    id: 9,\n    label: '3:00 PM - 4:00 PM',\n    start: '15:00',\n    end: '16:00'\n  }, {\n    id: 10,\n    label: '4:00 PM - 5:00 PM',\n    start: '16:00',\n    end: '17:00'\n  }, {\n    id: 11,\n    label: '5:00 PM - 6:00 PM',\n    start: '17:00',\n    end: '18:00'\n  }, {\n    id: 12,\n    label: '6:00 PM - 7:00 PM',\n    start: '18:00',\n    end: '19:00'\n  }, {\n    id: 13,\n    label: '7:00 PM - 8:00 PM',\n    start: '19:00',\n    end: '20:00'\n  }, {\n    id: 14,\n    label: '8:00 PM - 9:00 PM',\n    start: '20:00',\n    end: '21:00'\n  }, {\n    id: 15,\n    label: '9:00 PM - 10:00 PM',\n    start: '21:00',\n    end: '22:00'\n  }, {\n    id: 16,\n    label: '10:00 PM - 11:00 PM',\n    start: '22:00',\n    end: '23:00'\n  }]);\n\n  // Days of week in Mongolian\n  const daysOfWeek = ['Даваа', 'Мягмар', 'Лхагва', 'Пүрэв', 'Баасан', 'Бямба', 'Ням'];\n\n  // Load employee's saved availability data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (!user || user.role !== 'Employee') {\n          navigate('/login');\n          return;\n        }\n\n        // Set employee ID from user data\n        if (user.employee && user.employee.id) {\n          setEmployeeId(user.employee.id);\n\n          // Fetch employee availability\n          console.log('Fetching availability for employee:', user.employee.id);\n          const response = await api.get(`/api/availability/employee/${user.employee.id}`);\n          console.log('Loaded availability data:', response.data);\n\n          // Format availability data\n          const availabilityMap = {};\n\n          // Initialize all days with empty arrays\n          for (let i = 0; i < 7; i++) {\n            availabilityMap[i] = [];\n          }\n\n          // Add available time slots\n          response.data.forEach(slot => {\n            availabilityMap[slot.day_of_week].push({\n              id: slot.id,\n              start: slot.start_time,\n              end: slot.end_time\n            });\n          });\n          setAvailability(availabilityMap);\n          console.log('Processed availability data:', availabilityMap);\n        }\n      } catch (err) {\n        console.error('Error loading availability:', err);\n        setError('Failed to load availability data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [navigate, user]);\n\n  // Load manager's schedule settings \n  useEffect(() => {\n    const fetchScheduleSettings = async () => {\n      try {\n        var _user$employee;\n        // Get employee's branch\n        if (!(user !== null && user !== void 0 && (_user$employee = user.employee) !== null && _user$employee !== void 0 && _user$employee.branch_id)) return;\n        console.log('Fetching schedule settings for branch:', user.employee.branch_id);\n\n        // Get active schedules for this branch\n        const schedulesResponse = await api.get(`/api/schedules/branch/${user.employee.branch_id}`);\n        console.log('Branch schedules:', schedulesResponse.data);\n        if (schedulesResponse.data.length > 0) {\n          // Get the most recent schedule\n          const latestSchedule = schedulesResponse.data[0];\n\n          // Get schedule settings\n          const settingsResponse = await api.get(`/api/schedules/${latestSchedule.id}/settings`);\n          const settings = settingsResponse.data;\n          console.log('Schedule settings:', settings);\n\n          // Adjust time slots based on settings\n          if (settings) {\n            // Filter time slots based on schedule settings\n            if (settings.start_time && settings.end_time) {\n              const filteredTimeSlots = timeSlotsList.filter(slot => {\n                return slot.start >= settings.start_time && slot.end <= settings.end_time;\n              });\n              setTimeSlots(filteredTimeSlots);\n              console.log('Filtered time slots:', filteredTimeSlots);\n            }\n\n            // Update days of week based on settings.selected_days\n            if (settings.selected_days) {\n              try {\n                const selectedDays = typeof settings.selected_days === 'string' ? JSON.parse(settings.selected_days) : settings.selected_days;\n\n                // Filter days of week\n                setVisibleDays(selectedDays.map(Number));\n                console.log('Visible days:', selectedDays);\n              } catch (error) {\n                console.error('Error parsing selected days:', error);\n              }\n            }\n          }\n        }\n      } catch (err) {\n        console.error('Error fetching schedule settings:', err);\n      }\n    };\n    fetchScheduleSettings();\n  }, [user, timeSlotsList]);\n  const toggleTimeSlot = (dayOfWeek, timeSlot) => {\n    const newAvailability = {\n      ...availability\n    };\n\n    // Check if the time slot is already selected\n    const slotIndex = newAvailability[dayOfWeek].findIndex(slot => slot.start === timeSlot.start && slot.end === timeSlot.end);\n    if (slotIndex === -1) {\n      // Add the time slot\n      newAvailability[dayOfWeek].push({\n        start: timeSlot.start,\n        end: timeSlot.end\n      });\n    } else {\n      // Remove the time slot\n      newAvailability[dayOfWeek].splice(slotIndex, 1);\n    }\n    setAvailability(newAvailability);\n  };\n  const isTimeSlotSelected = (dayOfWeek, timeSlot) => {\n    var _availability$dayOfWe;\n    return (_availability$dayOfWe = availability[dayOfWeek]) === null || _availability$dayOfWe === void 0 ? void 0 : _availability$dayOfWe.some(slot => slot.start === timeSlot.start && slot.end === timeSlot.end);\n  };\n  const saveAvailability = async () => {\n    if (!employeeId) return;\n    setSaving(true);\n    setError('');\n    try {\n      // Format availability data for API\n      const availabilityData = [];\n      for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\n        if (availability[dayOfWeek]) {\n          availability[dayOfWeek].forEach(slot => {\n            availabilityData.push({\n              employeeId,\n              dayOfWeek,\n              startTime: slot.start,\n              endTime: slot.end\n            });\n          });\n        }\n      }\n      console.log('Sending availability data:', availabilityData);\n\n      // Send to API\n      await api.post(`/api/availability/employee/${employeeId}`, {\n        availability: availabilityData\n      });\n\n      // Show success message\n      alert('Хуваарь амжилттай хадгалагдлаа!');\n    } catch (err) {\n      console.error('Error saving availability:', err);\n      setError('Failed to save availability');\n    } finally {\n      setSaving(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto px-4 py-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-6\",\n      children: \"\\u04E8\\u04E9\\u0440\\u0438\\u0439\\u043D \\u0437\\u0430\\u0432\\u0442\\u0430\\u0439 \\u0446\\u0430\\u0433\\u0438\\u0439\\u0433 \\u0441\\u043E\\u043D\\u0433\\u043E\\u0445\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-50 border-l-4 border-red-500 p-4 mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-red-700\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: \"\\u0414\\u043E\\u043E\\u0440\\u0445 \\u0445\\u04AF\\u0441\\u043D\\u044D\\u0433\\u0442\\u044D\\u044D\\u0441 \\u04E9\\u04E9\\u0440\\u0438\\u0439\\u043D \\u0430\\u0436\\u0438\\u043B\\u043B\\u0430\\u0445 \\u0431\\u043E\\u043B\\u043E\\u043C\\u0436\\u0442\\u043E\\u0439 \\u0446\\u0430\\u0433\\u0443\\u0443\\u0434\\u044B\\u0433 \\u0441\\u043E\\u043D\\u0433\\u043E\\u043D\\u043E \\u0443\\u0443. \\u0422\\u0430 \\u0445\\u044D\\u0434 \\u0445\\u044D\\u0434\\u044D\\u043D \\u0446\\u0430\\u0433\\u0438\\u0439\\u0433 \\u0441\\u043E\\u043D\\u0433\\u043E\\u0436 \\u0431\\u043E\\u043B\\u043D\\u043E.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-md overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-8 border-b\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-4 font-medium text-gray-500 border-r\",\n          children: \"\\u0426\\u0430\\u0433\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), daysOfWeek.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `p-4 text-center font-medium ${!visibleDays.includes(index) ? 'opacity-50' : ''}`,\n          children: day\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), timeSlotsList.map(timeSlot => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-8 border-b\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-4 text-sm text-gray-600 border-r\",\n          children: timeSlot.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this), [0, 1, 2, 3, 4, 5, 6].map(dayOfWeek => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-center p-4\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `w-full h-8 rounded-md transition-colors ${isTimeSlotSelected(dayOfWeek, timeSlot) ? 'bg-blue-500 text-white' : 'bg-gray-100 hover:bg-gray-200 text-gray-700'}`,\n            onClick: () => toggleTimeSlot(dayOfWeek, timeSlot),\n            disabled: !visibleDays.includes(dayOfWeek),\n            style: {\n              opacity: visibleDays.includes(dayOfWeek) ? 1 : 0.5\n            },\n            children: \"\\u0421\\u043E\\u043D\\u0433\\u043E\\u0445\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 17\n          }, this)\n        }, dayOfWeek, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 15\n        }, this))]\n      }, timeSlot.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 flex justify-end\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:bg-blue-300\",\n        onClick: saveAvailability,\n        disabled: saving,\n        children: saving ? 'Хадгалж байна...' : 'Хадгалах'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n};\n_s(Availability, \"4MbiOenp9W72t4GJK8VX7Ur5RkE=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = Availability;\nexport default Availability;\nvar _c;\n$RefreshReg$(_c, \"Availability\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","api","useAuth","jsxDEV","_jsxDEV","Availability","_s","user","navigate","loading","setLoading","saving","setSaving","error","setError","availability","setAvailability","employeeId","setEmployeeId","visibleDays","setVisibleDays","timeSlotsList","setTimeSlots","id","label","start","end","daysOfWeek","fetchData","role","employee","console","log","response","get","data","availabilityMap","i","forEach","slot","day_of_week","push","start_time","end_time","err","fetchScheduleSettings","_user$employee","branch_id","schedulesResponse","length","latestSchedule","settingsResponse","settings","filteredTimeSlots","filter","selected_days","selectedDays","JSON","parse","map","Number","toggleTimeSlot","dayOfWeek","timeSlot","newAvailability","slotIndex","findIndex","splice","isTimeSlotSelected","_availability$dayOfWe","some","saveAvailability","availabilityData","startTime","endTime","post","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","day","index","includes","onClick","disabled","style","opacity","_c","$RefreshReg$"],"sources":["C:/Users/PC/scheduling-app/client/src/pages/employee/Availability.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport api from '../../services/api';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\n\r\nconst Availability = () => {\r\n  const { user } = useAuth();\r\n  const navigate = useNavigate();\r\n  \r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [availability, setAvailability] = useState({});\r\n  const [employeeId, setEmployeeId] = useState(null);\r\n  const [visibleDays, setVisibleDays] = useState([0, 1, 2, 3, 4, 5, 6]);\r\n  const [timeSlotsList, setTimeSlots] = useState([\r\n    { id: 1, label: '7:00 AM - 8:00 AM', start: '07:00', end: '08:00' },\r\n    { id: 2, label: '8:00 AM - 9:00 AM', start: '08:00', end: '09:00' },\r\n    { id: 3, label: '9:00 AM - 10:00 AM', start: '09:00', end: '10:00' },\r\n    { id: 4, label: '10:00 AM - 11:00 AM', start: '10:00', end: '11:00' },\r\n    { id: 5, label: '11:00 AM - 12:00 PM', start: '11:00', end: '12:00' },\r\n    { id: 6, label: '12:00 PM - 1:00 PM', start: '12:00', end: '13:00' },\r\n    { id: 7, label: '1:00 PM - 2:00 PM', start: '13:00', end: '14:00' },\r\n    { id: 8, label: '2:00 PM - 3:00 PM', start: '14:00', end: '15:00' },\r\n    { id: 9, label: '3:00 PM - 4:00 PM', start: '15:00', end: '16:00' },\r\n    { id: 10, label: '4:00 PM - 5:00 PM', start: '16:00', end: '17:00' },\r\n    { id: 11, label: '5:00 PM - 6:00 PM', start: '17:00', end: '18:00' },\r\n    { id: 12, label: '6:00 PM - 7:00 PM', start: '18:00', end: '19:00' },\r\n    { id: 13, label: '7:00 PM - 8:00 PM', start: '19:00', end: '20:00' },\r\n    { id: 14, label: '8:00 PM - 9:00 PM', start: '20:00', end: '21:00' },\r\n    { id: 15, label: '9:00 PM - 10:00 PM', start: '21:00', end: '22:00' },\r\n    { id: 16, label: '10:00 PM - 11:00 PM', start: '22:00', end: '23:00' },\r\n  ]);\r\n  \r\n  // Days of week in Mongolian\r\n  const daysOfWeek = ['Даваа', 'Мягмар', 'Лхагва', 'Пүрэв', 'Баасан', 'Бямба', 'Ням'];\r\n  \r\n  // Load employee's saved availability data\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        if (!user || user.role !== 'Employee') {\r\n          navigate('/login');\r\n          return;\r\n        }\r\n        \r\n        // Set employee ID from user data\r\n        if (user.employee && user.employee.id) {\r\n          setEmployeeId(user.employee.id);\r\n          \r\n          // Fetch employee availability\r\n          console.log('Fetching availability for employee:', user.employee.id);\r\n          const response = await api.get(`/api/availability/employee/${user.employee.id}`);\r\n          console.log('Loaded availability data:', response.data);\r\n          \r\n          // Format availability data\r\n          const availabilityMap = {};\r\n          \r\n          // Initialize all days with empty arrays\r\n          for (let i = 0; i < 7; i++) {\r\n            availabilityMap[i] = [];\r\n          }\r\n          \r\n          // Add available time slots\r\n          response.data.forEach(slot => {\r\n            availabilityMap[slot.day_of_week].push({\r\n              id: slot.id,\r\n              start: slot.start_time,\r\n              end: slot.end_time\r\n            });\r\n          });\r\n          \r\n          setAvailability(availabilityMap);\r\n          console.log('Processed availability data:', availabilityMap);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error loading availability:', err);\r\n        setError('Failed to load availability data');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, [navigate, user]);\r\n  \r\n  // Load manager's schedule settings \r\n  useEffect(() => {\r\n    const fetchScheduleSettings = async () => {\r\n      try {\r\n        // Get employee's branch\r\n        if (!user?.employee?.branch_id) return;\r\n        \r\n        console.log('Fetching schedule settings for branch:', user.employee.branch_id);\r\n        \r\n        // Get active schedules for this branch\r\n        const schedulesResponse = await api.get(`/api/schedules/branch/${user.employee.branch_id}`);\r\n        console.log('Branch schedules:', schedulesResponse.data);\r\n        \r\n        if (schedulesResponse.data.length > 0) {\r\n          // Get the most recent schedule\r\n          const latestSchedule = schedulesResponse.data[0];\r\n          \r\n          // Get schedule settings\r\n          const settingsResponse = await api.get(`/api/schedules/${latestSchedule.id}/settings`);\r\n          const settings = settingsResponse.data;\r\n          console.log('Schedule settings:', settings);\r\n          \r\n          // Adjust time slots based on settings\r\n          if (settings) {\r\n            // Filter time slots based on schedule settings\r\n            if (settings.start_time && settings.end_time) {\r\n              const filteredTimeSlots = timeSlotsList.filter(slot => {\r\n                return slot.start >= settings.start_time && slot.end <= settings.end_time;\r\n              });\r\n              \r\n              setTimeSlots(filteredTimeSlots);\r\n              console.log('Filtered time slots:', filteredTimeSlots);\r\n            }\r\n            \r\n            // Update days of week based on settings.selected_days\r\n            if (settings.selected_days) {\r\n              try {\r\n                const selectedDays = typeof settings.selected_days === 'string' \r\n                  ? JSON.parse(settings.selected_days) \r\n                  : settings.selected_days;\r\n                \r\n                // Filter days of week\r\n                setVisibleDays(selectedDays.map(Number));\r\n                console.log('Visible days:', selectedDays);\r\n              } catch (error) {\r\n                console.error('Error parsing selected days:', error);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching schedule settings:', err);\r\n      }\r\n    };\r\n    \r\n    fetchScheduleSettings();\r\n  }, [user, timeSlotsList]);\r\n  \r\n  const toggleTimeSlot = (dayOfWeek, timeSlot) => {\r\n    const newAvailability = { ...availability };\r\n    \r\n    // Check if the time slot is already selected\r\n    const slotIndex = newAvailability[dayOfWeek].findIndex(\r\n      slot => slot.start === timeSlot.start && slot.end === timeSlot.end\r\n    );\r\n    \r\n    if (slotIndex === -1) {\r\n      // Add the time slot\r\n      newAvailability[dayOfWeek].push({\r\n        start: timeSlot.start,\r\n        end: timeSlot.end\r\n      });\r\n    } else {\r\n      // Remove the time slot\r\n      newAvailability[dayOfWeek].splice(slotIndex, 1);\r\n    }\r\n    \r\n    setAvailability(newAvailability);\r\n  };\r\n  \r\n  const isTimeSlotSelected = (dayOfWeek, timeSlot) => {\r\n    return availability[dayOfWeek]?.some(\r\n      slot => slot.start === timeSlot.start && slot.end === timeSlot.end\r\n    );\r\n  };\r\n  \r\n  const saveAvailability = async () => {\r\n    if (!employeeId) return;\r\n    \r\n    setSaving(true);\r\n    setError('');\r\n    \r\n    try {\r\n      // Format availability data for API\r\n      const availabilityData = [];\r\n      \r\n      for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\r\n        if (availability[dayOfWeek]) {\r\n          availability[dayOfWeek].forEach(slot => {\r\n            availabilityData.push({\r\n              employeeId,\r\n              dayOfWeek,\r\n              startTime: slot.start,\r\n              endTime: slot.end\r\n            });\r\n          });\r\n        }\r\n      }\r\n      \r\n      console.log('Sending availability data:', availabilityData);\r\n      \r\n      // Send to API\r\n      await api.post(`/api/availability/employee/${employeeId}`, { \r\n        availability: availabilityData \r\n      });\r\n      \r\n      // Show success message\r\n      alert('Хуваарь амжилттай хадгалагдлаа!');\r\n    } catch (err) {\r\n      console.error('Error saving availability:', err);\r\n      setError('Failed to save availability');\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container mx-auto px-4 py-6\">\r\n      <h1 className=\"text-2xl font-bold mb-6\">Өөрийн завтай цагийг сонгох</h1>\r\n      \r\n      {error && (\r\n        <div className=\"bg-red-50 border-l-4 border-red-500 p-4 mb-4\">\r\n          <p className=\"text-sm text-red-700\">{error}</p>\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"mb-6\">\r\n        <p className=\"text-gray-600\">\r\n          Доорх хүснэгтээс өөрийн ажиллах боломжтой цагуудыг сонгоно уу. \r\n          Та хэд хэдэн цагийг сонгож болно.\r\n        </p>\r\n      </div>\r\n      \r\n      <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\r\n        <div className=\"grid grid-cols-8 border-b\">\r\n          <div className=\"p-4 font-medium text-gray-500 border-r\">Цаг</div>\r\n          {daysOfWeek.map((day, index) => (\r\n            <div key={index} className={`p-4 text-center font-medium ${!visibleDays.includes(index) ? 'opacity-50' : ''}`}>\r\n              {day}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        \r\n        {timeSlotsList.map(timeSlot => (\r\n          <div key={timeSlot.id} className=\"grid grid-cols-8 border-b\">\r\n            <div className=\"p-4 text-sm text-gray-600 border-r\">\r\n              {timeSlot.label}\r\n            </div>\r\n            \r\n            {[0, 1, 2, 3, 4, 5, 6].map(dayOfWeek => (\r\n              <div \r\n                key={dayOfWeek} \r\n                className=\"flex items-center justify-center p-4\"\r\n              >\r\n                <button\r\n                  className={`w-full h-8 rounded-md transition-colors ${\r\n                    isTimeSlotSelected(dayOfWeek, timeSlot)\r\n                      ? 'bg-blue-500 text-white'\r\n                      : 'bg-gray-100 hover:bg-gray-200 text-gray-700'\r\n                  }`}\r\n                  onClick={() => toggleTimeSlot(dayOfWeek, timeSlot)}\r\n                  disabled={!visibleDays.includes(dayOfWeek)}\r\n                  style={{ opacity: visibleDays.includes(dayOfWeek) ? 1 : 0.5 }}\r\n                >\r\n                  Сонгох\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"mt-6 flex justify-end\">\r\n        <button\r\n          className=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:bg-blue-300\"\r\n          onClick={saveAvailability}\r\n          disabled={saving}\r\n        >\r\n          {saving ? 'Хадгалж байна...' : 'Хадгалах'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Availability;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}